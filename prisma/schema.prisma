// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  APIKey        APIKey[]
  Profile       Profile?
  isVisible     Boolean   @default(false)
  Comment       Comment[]
}

model Profile {
  id        String @id @default(cuid())
  bio       String @db.Text
  skills    String
  link      String
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique
  imageLink String @default("")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean   @default(false)
  content   String    @db.Text
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  Comment   Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model APIKey {
  id      String       @id @default(cuid())
  key     String       @unique
  enabled Boolean      @default(true)
  user    User         @relation(fields: [userId], references: [id])
  userId  String
  request APIRequest[]

  @@unique([userId, key, enabled])
}

model APIRequest {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  method     String
  path       String
  status     Int
  Duration   Int
  usedAPIKey String

  ApiKey   APIKey @relation(fields: [apiKeyID], references: [id])
  apiKeyID String
}

enum Role {
  USER
  ADMIN
}
